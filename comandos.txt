** para iniciar un repositorio local se usa **
  git init

** para pasar todo cambios al stage area se usa **
  git add . "esto añade todos los cambios de los archivos"
  git add app.py "solo añade un archivo especifico"

** para guardar los cambioslocalmente **
  git commit -m ""   "en las comillas especificamos la descripción del commit"

** para clonar un repositorio ya existente usamos **
  git clone <"url">

** para ver el estado de mi rama actual **
  git status
  git status -s para mostrarlo de forma corta 

** para sacar archivos fuera del area de stage **
  git restore --staged <"archivo">

** para mostrar de una forma mas detallada lo que has cambiado **
  git diff --staged

** para eliminar archivos de mis commits **
  git rm <'archivo'>

** para mostrar los commits hechos y sus datos **
  git log
  git log --pretty=oneline "para mostrarlo en una sola linea"

** para rehacer cambios de mi ultimo commit **
  git commit --amend "Muestra un editor de codigo para modificar cosas"
  git commit --amend -m <'valor'> "puedo cambiarle la descripción a mi ultimo commit"
  git commit --amend --no-edit "Me permite añadir (que esten en el stage area) o eliminar archivos en mi ultimo commit"

** para quitar archivos del stage area **
  git reset HEAD <'archivo'>
  git restore --staged <'archivo'>

** para descartar cambios de un archivo **
  git checkout -- <'archivo'>
  git restore <'archivo'>

** clonar repositorio remoto **
  git clone <"url">

** para mostrar los nombres cortos de mis repositorios remotos **
  git remote
  git remote -v "Me muestra el nombre corto y la url del repositorio remoto"

** añadir un nuevo repositorio remoto explicito **
  git remote add <"nombre corto"> <"Url">

** para obtener cambios de un repositorio remoto, pero sin aplicarlos **
  git fetch <"remote">
  git fetch <"remote"> <"branch"> "recupera la rama especifica"
  git fetch --all "recupera todos los reposito"rios remotos y sus ramas"
  git fetch --fry-run 
  "ejecutará una demo del comando. Genera ejemplos de acciones que realizará   durante la  recuperación, pero no los aplica."

** para obtener cambios y fusionarlos localmente **
  git pull
  git pull <"remote"> para obtener cambios de un repositorio especifico

** para mandar cambios (commits) a el repositorio remoto **
  git push <"remote"> <"branch">

** para ver información sobre un repositorio remoto **
  git remote show <"remote">

** renombrar remoto **
  git remote rename <"nombre antiguo"> <"nuevo nombre">

** remover remoto **
  git remote remove <"remoto">

** Etiquetando **
"
  Las etiquetas son referencias que apuntan a puntos concretos en el historial de git, una etiqueta
  es como una rama que no cambia, pero que al momento de crearse ya no tiene mas confirmaciones. Son
  utilizadas para una publicación de versión marcada. Ejemplo: v1.0.1.

  En git exiten dos tipos de etiquetas: anotadas y ligeras. Las dos difieren en la cantidad de 
  metadatos adjuntos que almacenan. Una practica recomendada es cosiderar a las etiquetas anotadas
  como publicas y las etiquetas ligeras como privadas. El nombre de la persona, su correo y fecha
  son datos importantes para una publicación publica. Las etiquetas ligeras son básicamente 
  marcadores de una confirmación; son solo un nombre y un puntero a una confirmación, útiles para crear enlaces rapidos a las confirmaciónes relevantes.
"

** crear etiqueta anotada **
  git tag -a <"tagName"> "abre un editor para pedir que se introduzcan metadatos"
  git tag -a <"tagName"> -m "mensaje" "ya no abre el editor."

** crear una etiqueta ligera **
  git tag <"tagName">

** listar etiquetas **
  git tag

** listar una serie de etiquetas en particular **
  git tag -l <"expresión">

** para etiquetar commits antiguos **
  git tag -a <"tagName"> <"referencia al hash sha del commit"> "para ver el hash sha puede ejecutar
  el siguiente comando: git log --pretty=oneline"

  git tag <"tagName"> <"referencia al hash sha del commit"> "lo mismo con una etiqueta ligera"

** para reetiquetar una etiqueta **
  git tag -a -f <"nameTag"> <"referencia al hash sha del commit">

** para revisar el estado de el repositorio con una etiqueta **
  git checkout <"nameTag"> "Esto creara una rama nueva desasociada, que no modificara el estado del
  repositorio"

** para pushear etiquetas a el remoto **
  git push <"remoto"> <"nameTag">
  git push <"remoto"> --tags "para hacerlo con todas"

** eliminar etiquetas **
  git tag -d <"nameTag">
  git push <"remoto"> --delete <"tagname"> "eliminar etiquetas remotas"

** git branching **

* para crear una nueva rama **
  git branch <"nombre de la rama">

** para cambiar a una rama existente **
  git checkout <"nombre de la rama">
  
